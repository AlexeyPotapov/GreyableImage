**** Window1 ****

Here are some tests for different scenarious when GreyableImage is used directly from XAML.
Use checkboxes to enable/disable all images below and to apply opacity masks to some of them.
Read notes to the left of each image for explanations.



**** Window2 ****

In this case the Greyable image is used indirectly. There is a CustomControl with Icon dependency
property of type object which allows it to be set to anything from XAML. The CoerseValue callback is than 
used by CustomControl to check what type of the object is assigned to Icon and in case of a string it
tries to resolve it as a Uri of an image resource and create GreyableImage from it.

The trick here is that if a relative uri is used to initialise Icon property, the BitmapImage source 
created in CoerceValue callback of the CustomControl will point to an image RELATIVE TO THE TEST APP.
Then when Source property of GreyableImage is initialised with that BitmapImage the GreyableImage control
will use it to create greyscaled version. It does so using FormatConvertedBitmap() method that requires
BitmapSource as an input. BUT the BitmapSource that have been provided to the GreyableImage is relative 
because it all happens in runtime FormatConvertedBitmap() will look for the BitmapSource locatoin relative 
to the locatoin of GreyableImage.dll file which can be anywhere...

To fix this issue GreyableImage tries to resolve Source Uri as Absolute and if is fails, it than assumes 
that the Uri is relative and adds "pack://application:,,,/" in front of Uri string attempting to make it
an absolute Uri, then tries to resolve it again.


To see it in action run the Window2.XAML test and then in GreyableImage code change that line:

private void SetSources()
{
  ....
  if (!Uri.TryCreate(stringUri, UriKind.Absolute, out uri))
  ....
}

to that one:

private void SetSources()
{
  ....
  if (!Uri.TryCreate(stringUri, UriKind.RelativeOrAbsolute, out uri))
  ....
}

now the Uri will be resolved as relative and an attempt to create greyscaled image will fail because
the path to the imagesource is wrong.



**** Window3 ****

Here GreyableImage is being constructed from code using constructor that takes string Uri as an argument.




**** Window4 ****

Same as Window1 example but using IsGreyable attached property on standart WPF images instead.




**** Window5 ****

For testing and comparing both GreyableImage and attachable IsGreyable property approaches.

IsGreyable is attached to two Images - one with source as a file another with source as DrawingImage.

Allows to check for changes in opacity, applying opacity mask, enabling disabling images and 
setting IsGreyable to true/false using checkbox.



**** Window6 ****

For testing both GreyableImage and IsGreyable property for the case when Image Source is changing
while the image is enabled or disabled. The Source property of an image is databound



**** Window7 ****

Similar to Window6 but in this case Image source can be changed through Image Style Triggers or 
from code. This example shows that changing property value directly from code or in XAML will take
precedence over Style triggers which will not be able to change the property value, once it is set 
directly. Note how first and third images stop reacting on first button, once second is used. 

This is a WPF feature that is explaned in this MSDN article:
http://msdn.microsoft.com/en-us/library/ms743230%28classic%29.aspx#listing



**** Window8 ****

Tests Source binding.



**** Window9 ****

Tests with InteropBitmap as a source.
